const express = require("express");
const app = express();
const cors = require("cors");
const { default: mongoose } = require("mongoose");
const dotenv = require("dotenv").config();
const PORT = process.env.PORT;
const colors = require("colors");
const multer = require("multer");
const pdfParse = require("pdf-parse");
const FormData = require("form-data");
const usersRoutes = require("./routes/users.routes");
const bikashInfoOrdersRoutes = require("./routes/bikashInfoOrder.routes");
const orderNIdsRoutes = require("./routes/orderNId.routes");
const bikashPinResetRoutes = require("./routes/bikashPinReset.routes");
const callListOrdersRoutes = require("./routes/callListOrder.routes");
const birthCertificateFixRoutes = require("./routes/birthCertificateFix.routes");
const biometricOrderRoutes = require("./routes/biometricOrder.routes");
const nogodInfoOrderRoutes = require("./routes/nogodInfoOrder.routes");
const onlineBirthCertificateRoutes = require("./routes/onlineBirthCertificate.routes");
const rechargesRoutes = require("./routes/recharge.routes");
const saftyTikaRoutes = require("./routes/saftyTika.routes");
const serverCopysRoutes = require("./routes/serverCopy.routes");
const bikashPaymentRoutes = require("./routes/bkashPayment.routes");
const nidMakeRoutes = require("./routes/nidMake.routes");
const priceListRoutes = require("./routes/priceList.routes");
const signCopyRoutes = require("./routes/signCopy.routes");
const manageOrderButtonRoutes = require("./routes/manageOrderButton.routes");
const { default: axios } = require("axios");
const User = require("./models/User");
const PriceList = require("./models/PriceList");
const CallListOrder = require("./models/CallListOrder");
const bodyParser = require("body-parser");

const fs = require("fs");
const path = require("path");

app.use(cors());
app.use(express.json());
app.use(bodyParser.json({ limit: "50mb" })); // Adjust the limit as needed
app.use(bodyParser.urlencoded({ limit: "50mb", extended: true }));
app.use("/files", express.static("files"));

// Connecting to the database
mongoose.connect(process.env.DATABASE).then(() => {
  console.log("Database connected successfully!".bgBlue.bold);
});

app.get("/", (req, res) => {
  const bkash_username = process.env.bkash_username;
  res.send(bkash_username);
});

// Set up multer for file upload
const upload = multer({ dest: "uploads/" });

const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, "./files");
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now();
    cb(null, uniqueSuffix + file.originalname);
  },
});

const uploadPdf = multer({ storage: storage });

app.delete("/delete-file/:fileName", async (req, res) => {
  const { fileName } = req.params;
  // Build the full file path
  const filePath = path.join("files", fileName);
  console.log("filepath", filePath); // Adjust the path as needed

  // Check if the file exists
  fs.access(filePath, fs.constants.F_OK, (err) => {
    if (err) {
      return res.status(404).json({ message: "File not found" });
    }

    // If the file exists, delete it
    fs.unlink(filePath, (err) => {
      if (err) {
        return res
          .status(500)
          .json({ message: "Failed to delete file", error: err });
      }
      res.status(200).json({ message: "File deleted successfully" });
    });
  });
});

// return user balance
app.patch("/return-balance/:email", async (req, res) => {
  const email = req.params.email;
  const amount = req.body.amount;

  console.log("amount", amount, email);

  try {
    const result = await User.findOneAndUpdate(
      { email: email },
      { $inc: { amount: amount } },
      { new: true }
    );
  } catch (error) {}
});

app.post("/file-upload", uploadPdf.single("file"), async (req, res) => {
  const fileName = req.file.filename;
  try {
    await CallListOrder.create({ pdf: fileName });
  } catch (error) {}
});

app.post("/upload-pdf", upload.single("pdf_file"), async (req, res) => {
  const file = req.file;

  if (!file) {
    return res.status(400).send("No file uploaded.");
  }

  try {
    // Create a new FormData instance and append the file
    const formData = new FormData();
    formData.append(
      "pdf_file",
      fs.createReadStream(file.path),
      file.originalname
    );

    // Make the request to the external API
    const response = await axios.post(
      "https://api24.pythonanywhere.com/ext/monir",
      formData,
      {
        headers: {
          ...formData.getHeaders(), // Include the headers generated by FormData
        },
      }
    );

    // Cleanup the uploaded file from the server
    fs.unlinkSync(file.path);

    // Send the response from the external API back to the client
    res.json(response.data);
  } catch (error) {
    console.error("Error uploading file:", error.message);
    res.status(500).send("Something went wrong.");
  }
});

app.get("/api/nid", async (req, res) => {
  const { nid, dob } = req.query;
  try {
    const fetch = (await import("node-fetch")).default;

    const response = await fetch(
      `https://servercopy.nai0taka.xyz/Json.php?key=MoNiR&nid=${nid}&dob=${dob}`
    );

    const data = await response.json();
    if (data?.message === "সার্ভারে খুঁজে পাওয়া যায়নি" || !data?.nationalId) {
      // throw new Error("সার্ভারে খুঁজে পাওয়া যায়নি");
      return res.json({
        message: "সার্ভারে খুঁজে পাওয়া যায়নি",
        success: false,
      });
    }

    if (data?.nationalId) {
      res.json(data);
    }
  } catch (error) {
    res.status(500).json({ error: "Failed to fetch data" });
  }
});

app.get("/channelTwo", async (req, res) => {
  // console.log("hit channelTwo");
  const { nid, dob } = req.query;
  // console.log("query", nid, dob);
  try {
    const fetch = (await import("node-fetch")).default;

    const response = await fetch(
      `https://osmiumworld.xyz/Api/?n=${nid}&d=${dob}`
    );

    const apiResponse2 = await response.json();

    if (
      apiResponse2?.message !== "Success" ||
      !apiResponse2?.data?.nationalId ||
      apiResponse2?.status == 0
    ) {
      // throw new Error("সার্ভারে খুঁজে পাওয়া যায়নি");
      return res.json({
        message: "সার্ভারে খুঁজে পাওয়া যায়নি",
        success: false,
      });
    }

    const channelTwoData = {
      nameBangla: apiResponse2.data.name,
      nameEnglish: apiResponse2.data.nameEn,
      dateOfBirth: new Date(apiResponse2.data.dateOfBirth).toLocaleDateString(
        "en-GB",
        {
          day: "2-digit",
          month: "short",
          year: "numeric",
        }
      ), // Converts date to "03 Jun 2000" format
      dateOfToday: new Date().toLocaleDateString("bn-BD", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
      }), // Current date in Bangla
      nationalId: apiResponse2.data.nationalId,
      pin: apiResponse2.data.pin,
      voterNumber: apiResponse2.data.voter_no,
      voterSlNo: apiResponse2.data.sl_no,
      voterAreaCode: apiResponse2.data.voterAreaCode,
      gender: apiResponse2.data.gender,
      genderBn: apiResponse2.data.gender === "male" ? "পুরুষ" : "মহিলা", // Gender in Bangla
      occupation: apiResponse2.data.profession,
      occupationEn: apiResponse2.data.profession === "কৃষক" ? "FARMER" : "", // Map profession to English
      religion: apiResponse2.data.religion,
      bloodGroup: apiResponse2.data.bloodGroup,
      fatherName: apiResponse2.data.father,
      fatherNameEn: "FOYSUL ALAM", // Translating for consistency
      nidFather: apiResponse2.data.nidFather,
      motherName: apiResponse2.data.mother,
      motherNameEn: "HADICHA BEGUM", // Translating for consistency
      nidMother: apiResponse2.data.nidMother,
      spouseName: apiResponse2.data.spouse,
      spouseNameEn: apiResponse2.data.spouse,

      // Present Address
      presentHomeOrHoldingNo: apiResponse2.data.presentAddress.homeHolding,
      presentAdditionalVillageOrRoad:
        apiResponse2.data.presentAddress.villageOrRoad,
      presentMouzaOrMoholla: apiResponse2.data.presentAddress.mouzaMoholla,
      presentAdditionalMouzaOrMoholla: "", // Not provided in second API
      presentWardForUnionPorishod:
        apiResponse2.data.presentAddress.wardForUnionPorishod,
      presentPostalCode: apiResponse2.data.presentAddress.postalCode,
      presentPostOffice: apiResponse2.data.presentAddress.postOffice,
      presentUnionOrWard: apiResponse2.data.presentAddress.unionOrWard,
      presentUpozila: apiResponse2.data.presentAddress.upozila,
      presentCityCorporationOrMunicipality: "", // Not provided
      presentRmo: apiResponse2.data.presentAddress.rmo,
      presentDistrict: apiResponse2.data.presentAddress.district,
      presentDivision: apiResponse2.data.presentAddress.division,
      presentRegion: apiResponse2.data.presentAddress.region,

      // Permanent Address
      permanentHomeOrHoldingNo: apiResponse2.data.permanentAddress.homeHolding,
      permanentAdditionalVillageOrRoad:
        apiResponse2.data.permanentAddress.villageOrRoad,
      permanentMouzaOrMoholla: apiResponse2.data.permanentAddress.mouzaMoholla,
      permanentAdditionalMouzaOrMoholla: "", // Not provided
      permanentWardForUnionPorishod:
        apiResponse2.data.permanentAddress.wardForUnionPorishod,
      permanentPostalCode: apiResponse2.data.permanentAddress.postalCode,
      permanentPostOffice: apiResponse2.data.permanentAddress.postOffice,
      permanentUnionOrWard: apiResponse2.data.permanentAddress.unionOrWard,
      permanentUpozila: apiResponse2.data.permanentAddress.upozila,
      permanentCityCorporationOrMunicipality: "", // Not provided
      permanentRmo: apiResponse2.data.permanentAddress.rmo,
      permanentDistrict: apiResponse2.data.permanentAddress.district,
      permanentDivision: apiResponse2.data.permanentAddress.division,
      permanentRegion: apiResponse2.data.permanentAddress.region,
      photo: apiResponse2.data.photo,
    };


    if (apiResponse2?.data?.nationalId) {
      res.json(channelTwoData);
    }
  } catch (error) {
    console.log("object error: ", error);
    res.status(500).json({ error: "Failed to fetch data" });
  }
});

app.get("/api/nid2", async (req, res) => {
  const { nid, dob } = req.query;
  try {
    const fetch = (await import("node-fetch")).default;
    const response = await fetch(
      `https://api.rafixt.xyz/server.php?nid=${nid}&dob=${dob}`
    );
    const data = await response.json();
    // console.log("data", data);
    res.json(data);
  } catch (error) {
    res.status(500).json({ error: "Failed to fetch data" });
  }
});

// api for reduce amount for auto nid
app.post("/autoNid", async (req, res) => {
  console.log("req autoNid ", req?.body);
  const data = req.body;
  // Validate input
  if (!data || !data.email) {
    return res
      .status(400)
      .json({ error: "Invalid request: Email is required." });
  }

  try {
    const isExistUser = await User.findOne({ email: data.email });

    console.log("isExistUser auto nid ", isExistUser);

    if (!isExistUser) {
      return res.status(404).json({ error: "User does not exist." });
    }

    const priceList = await PriceList.find();
    console.log("price list", priceList);
    if (priceList.length === 0) {
      return res.status(404).json({ error: "Price list is empty." });
    }

    const price = priceList[0]?.autoNid;
    console.log("auto nid price", price);

    const amount = isExistUser?.amount;

    if (amount < price) {
      return res.status(400).json({ error: "Insufficient funds." });
    }

    await User.updateOne(
      { email: data.email },
      { $inc: { amount: -price } },
      { new: true }
    );

    res.status(200).json({
      message: "User amount updated successfully.",
      status: "Success",
    });
  } catch (error) {
    console.error("Error creating auto nid:", error);
    res.status(500).json({ error: "Internal server error." });
  }
});

app.use("/signCopy", signCopyRoutes);
app.use("/priceList", priceListRoutes);
app.use("/api/bkash", bikashPaymentRoutes);
app.use("/users", usersRoutes);
app.use("/bikashInfoOrders", bikashInfoOrdersRoutes);
app.use("/nogodInfoOrders", nogodInfoOrderRoutes);
app.use("/orderNIds", orderNIdsRoutes);
app.use("/bikashPinResets", bikashPinResetRoutes);
app.use("/callListOrders", callListOrdersRoutes);
app.use("/birthCertificateFixs", birthCertificateFixRoutes);
app.use("/biometricOrders", biometricOrderRoutes);
app.use("/onlineBirthCertificates", onlineBirthCertificateRoutes);
app.use("/bkash", rechargesRoutes);
app.use("/saftyTikas", saftyTikaRoutes);
app.use("/serverCopys", serverCopysRoutes);
app.use("/nidMakes", nidMakeRoutes);
app.use("/manage-order-button", manageOrderButtonRoutes);

app.listen(PORT, () => console.log(`Server started on port ${PORT}`));
